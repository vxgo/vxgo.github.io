<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java开发技术 on 胡言乱语</title>
    <link>https://vxgo.github.io/categories/java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in Java开发技术 on 胡言乱语</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 02 Aug 2018 17:24:58 +0000</lastBuildDate>
    
	<atom:link href="https://vxgo.github.io/categories/java%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java 位运算笔记</title>
      <link>https://vxgo.github.io/2018/08/02/java-positional-operator/</link>
      <pubDate>Thu, 02 Aug 2018 17:24:58 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2018/08/02/java-positional-operator/</guid>
      <description>&lt;p&gt;一些零碎的知识点总是似懂非懂，用法老是模棱两可，每次都要去网络上查询，长时间不用又忘记了。比如 Java 中的位运算。今天抽空归纳总结一下，加强一下记忆。&lt;/p&gt;

&lt;h2 id=&#34;一-原码-反码和补码&#34;&gt;一、原码、反码和补码&lt;/h2&gt;

&lt;h3 id=&#34;1-1-原码&#34;&gt;1.1 原码&lt;/h3&gt;

&lt;p&gt;一个数在计算机中的二进制表示形式，叫做这个数的机器数。机器数是带符号的，在计算机用一个数的最高位存放符号，正数为 0, 负数为 1。所以，为区别起见，将带符号位的机器数对应的真正数值称为机器数的真值。&lt;/p&gt;

&lt;p&gt;原码就是符号位加上真值的绝对值，即用第一位表示符号，其余位表示值。比如 8 位二进制:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[+1] 原 = 0000 0001
[-1] 原 = 1000 0001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第一位是符号位，因为第一位是符号位，所以 8 位二进制数的取值范围就是：[1111 1111 , 0111 1111]，即：[-127 , 127]
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JVM 运行时数据区域</title>
      <link>https://vxgo.github.io/2018/04/08/jvm-runtime-data-area/</link>
      <pubDate>Sun, 08 Apr 2018 17:30:33 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2018/04/08/jvm-runtime-data-area/</guid>
      <description>&lt;p&gt;Java 的内存区域划分绝不仅仅只是堆内存（heap）和栈内存（Stack），实际上 JVM 在执行 Java 程序的过程中会把它所管理的内存划分为以下几个数据区域：程序计数器、Java 虚拟机栈、本地方法栈、堆、方法区、运行时常量和直接内存。如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://wx3.sinaimg.cn/large/687148dbly1fq7bi09iazj21gf0ve0vv.jpg&#34; alt=&#34;Runtime DataArea&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 PowerMock 进行单元测试</title>
      <link>https://vxgo.github.io/2017/07/25/use-introduction-of-powermock/</link>
      <pubDate>Tue, 25 Jul 2017 19:01:14 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/07/25/use-introduction-of-powermock/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作。如果我们写的代码依赖于某些模块对象，而单元测试过程中这些对象又很难手动创建，或者模块还没有开发完成，那么就使用一个虚拟的对象来完成单元测试，这就是所谓的 Mock。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Java 单元测试中比较流行的 Mock 测试框架有 &lt;a href=&#34;http://www.jmock.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;jMock&lt;/a&gt;、&lt;a href=&#34;http://easymock.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;EasyMock&lt;/a&gt;、&lt;a href=&#34;https://github.com/mockito/mockito&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Mockito&lt;/a&gt;，但是这些 Mock 工具都不能 Mock &lt;code&gt;static&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt; 方法等，而 &lt;a href=&#34;https://github.com/powermock/powermock&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;PowerMock&lt;/a&gt; 能够做到。&lt;/p&gt;

&lt;p&gt;使用 PowerMock，首先需要使用 &lt;code&gt;@RunWith(PowerMockRunner.class)&lt;/code&gt; 将测试用例的 Runner 改为 &lt;code&gt;PowerMockRunner&lt;/code&gt;。如果要 Mock &lt;code&gt;static&lt;/code&gt;、&lt;code&gt;final&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt; 等方法的时候，就需要加注解 &lt;code&gt;@PrepareForTest&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;PowerMock 有两个版本，一个是基于 EasyMock 实现的，另一个是基于 Mockito 实现的。&lt;/p&gt;

&lt;p&gt;下面我将以 PowerMock 的 Mockito 的版本来讲述如何使用 PowerMock。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java 获取系统的配置信息</title>
      <link>https://vxgo.github.io/2017/03/29/java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</link>
      <pubDate>Wed, 29 Mar 2017 15:33:54 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/03/29/java-%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E7%9A%84%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF/</guid>
      <description>&lt;p&gt;&lt;code&gt;System.getProperty()&lt;/code&gt; 可以获取系统的配置信息，最近项目开发中要用到临时文件，所以想到了使用系统临时文件目录，最后得知可以通过 &lt;code&gt;System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;)&lt;/code&gt; 可以获取不同操作系统平台下的临时目录。比如：&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;windows&lt;/code&gt; 中的目录是：&lt;code&gt;C:\Users\登录用户~1\AppData\Local\Temp\&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;linux&lt;/code&gt; 下的目录是：&lt;code&gt;/tmp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;Mac&lt;/code&gt; 下目录是 &lt;code&gt;/var/folders/c8/2c9rf0ss2w9c8tdtfcgvg9kh0000gn/T/&lt;/code&gt; （我感觉是不同电脑应该不一样）&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] Kafka入门教程</title>
      <link>https://vxgo.github.io/2016/10/10/%E8%BD%AC-kafka%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Mon, 10 Oct 2016 21:40:52 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/10/10/%E8%BD%AC-kafka%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;一-基本概念&#34;&gt;一、基本概念&lt;/h1&gt;

&lt;h2 id=&#34;1-介绍&#34;&gt;1. 介绍&lt;/h2&gt;

&lt;p&gt;Kafka 是一个分布式的、可分区的、可复制的消息系统。它提供了普通消息系统的功能，但具有自己独特的设计。&lt;strong&gt;这个独特的设计是什么样的呢？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://vxgo.github.io/images/post/kafka-logo.png&#34; alt=&#34;&#34; /&gt;
&lt;!-- {% img /images/post/kafka-logo.png 400 %} --&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] JMS 基本概念</title>
      <link>https://vxgo.github.io/2016/07/21/%E8%BD%AC-jms-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</link>
      <pubDate>Thu, 21 Jul 2016 12:35:43 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/07/21/%E8%BD%AC-jms-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</guid>
      <description>&lt;p&gt;JMS（JAVA Message Service,java消息服务）API是一个消息服务的标准或者说是规范，允许应用程序组件基于JavaEE平台创建、发送、接收和读取消息。它使分布式通信耦合度更低，消息服务更加可靠以及异步性。&lt;/p&gt;

&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;

&lt;p&gt;JMS是java的消息服务，JMS的客户端之间可以通过JMS服务进行异步的消息传输。&lt;/p&gt;

&lt;h2 id=&#34;消息模型&#34;&gt;消息模型&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Point-to-Point(P2P)&lt;/li&gt;
&lt;li&gt;Publish/Subscribe(Pub/Sub)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;即点对点和发布订阅模型
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Java List与数组之间的转换</title>
      <link>https://vxgo.github.io/2016/07/20/java-list%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 20 Jul 2016 15:52:33 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/07/20/java-list%E4%B8%8E%E6%95%B0%E7%BB%84%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;h3 id=&#34;1-数组转换为list&#34;&gt;1. 数组转换为List&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;String[] arr = new String[] {&amp;quot;str1&amp;quot;, &amp;quot;str2&amp;quot;};
List&amp;lt;String&amp;gt; list = Arrays.asList(arr);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>