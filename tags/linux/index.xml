<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux on 胡言乱语</title>
    <link>https://vxgo.github.io/tags/linux/</link>
    <description>Recent content in Linux on 胡言乱语</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 24 May 2017 10:45:20 +0000</lastBuildDate>
    
	<atom:link href="https://vxgo.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>占用端口、PID 查询总结</title>
      <link>https://vxgo.github.io/2017/05/24/query-port-pid/</link>
      <pubDate>Wed, 24 May 2017 10:45:20 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/05/24/query-port-pid/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;总结一下日常工作学习中常用的查询占用端口、PID相关命令。主要有命令 ps、lsof、netstat 等命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;ps&#34;&gt;ps&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ps -ef&lt;/code&gt; 或者 &lt;code&gt;ps aux&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;根据命令（IntelliJIDEALicenseServer）搜索 PID（17107）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ps -ef | grep IntelliJIDEALicenseServer | grep -v &amp;quot;grep&amp;quot;
  501 17017 12203   0 10:01上午 ttys000    0:00.02 IntelliJIDEALicenseServer -p 21014
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;lsof&#34;&gt;lsof&lt;/h2&gt;

&lt;p&gt;根据 PID（17107）搜索占用端口（21014）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lsof -p 17017 -nP | grep TCP
COMMAND     PID  USER   FD     TYPE             DEVICE SIZE/OFF    NODE NAME
IntelliJI 17017 ehlxr    3u    IPv4 0xc0df10496212b0e3      0t0     TCP *:21014 (LISTEN)

# 或者使用
$ lsof -nP -iTCP -sTCP:LISTEN | grep 17017
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;-n 表示不显示主机名&lt;/li&gt;
&lt;li&gt;-P 表示不显示端口俗称&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Linux 操作笔记</title>
      <link>https://vxgo.github.io/2017/04/14/linux-%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Fri, 14 Apr 2017 11:18:41 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/04/14/linux-%E6%93%8D%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头，记录一下日常工作学习中常使用的 Linux 命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;安装磁盘分配&#34;&gt;安装磁盘分配&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/boot&lt;/code&gt; 用来存放与 Linux 系统启动有关的程序，比如启动引导装载程序等，建议大小为 100MB。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;swap&lt;/code&gt; 实现虚拟内存，建议大小是物理内存的1~2倍。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; Linux系统的根目录，所有的目录都挂在这个目录下面，建议大小为5GB以上。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/home&lt;/code&gt; 存放普通用户的数据，是普通用户的宿主目录，建议大小为剩下的空间。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;系统目录结构&#34;&gt;系统目录结构&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt;：存放系统程序，也就是 At&amp;amp;t 开发的 Unix 程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr&lt;/code&gt;：存放 Unix 系统商（比如 IBM 和 HP）开发的程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/usr/local&lt;/code&gt;：存放用户自己安装的程序。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/opt&lt;/code&gt;：在某些系统，用于存放第三方厂商开发的程序，所以取名为 option，意为 &amp;ldquo;选装&amp;rdquo;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 的 nohup 命令的用法</title>
      <link>https://vxgo.github.io/2017/01/18/linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 18 Jan 2017 16:13:21 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/01/18/linux-%E7%9A%84-nohup-%E5%91%BD%E4%BB%A4%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;如果你正在运行一个进程，而且你觉得在退出帐户时该进程还不会结束，那么可以使用 &lt;code&gt;nohup&lt;/code&gt; 命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;命令简介&#34;&gt;命令简介&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ nohup Command [ Arg … ] [ &amp;amp; ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该命令可以在你退出帐户/关闭终端之后继续运行相应的进程。&lt;code&gt;nohup&lt;/code&gt; 就是不挂起的意思（&lt;code&gt;no hang up&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nohup&lt;/code&gt; 运行由 &lt;code&gt;Command&lt;/code&gt; 和相关的 &lt;code&gt;Arg&lt;/code&gt; 参数指定的命令，忽略所有挂断（&lt;code&gt;SIGHUP&lt;/code&gt;）信号。要运行后台中的 &lt;code&gt;nohup&lt;/code&gt; 命令，添加 &lt;code&gt;&amp;amp;&lt;/code&gt; （ 表示 &lt;code&gt;and&lt;/code&gt; 的符号）到命令的尾部。&lt;/p&gt;

&lt;p&gt;如果使用 &lt;code&gt;nohup&lt;/code&gt; 命令提交作业，那么在缺省情况下该作业的所有输出都被重定向到一个名为 &lt;code&gt;nohup.out&lt;/code&gt; 的文件中，除非另外指定了输出文件。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux 中 fg、bg、jobs 等指令</title>
      <link>https://vxgo.github.io/2017/01/18/linux-%E4%B8%AD-fgbgjobs-%E7%AD%89%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Wed, 18 Jan 2017 15:30:16 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/01/18/linux-%E4%B8%AD-fgbgjobs-%E7%AD%89%E6%8C%87%E4%BB%A4/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;记录总结一下 &lt;code&gt;Linux&lt;/code&gt; 中 &lt;code&gt;fg&lt;/code&gt;、&lt;code&gt;bg&lt;/code&gt;、&lt;code&gt;jobs&lt;/code&gt;、&lt;code&gt;&amp;amp;&lt;/code&gt;、&lt;code&gt;ctrl + z&lt;/code&gt; 等相关指令对任务进程的操作。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;一-基本用法&#34;&gt;一、基本用法&lt;/h1&gt;

&lt;h2 id=&#34;1-1-和-jobs-指令&#34;&gt;1.1 &lt;code&gt;&amp;amp;&lt;/code&gt; 和 &lt;code&gt;jobs&lt;/code&gt; 指令&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; 用在一个命令的最后，可以把这个命令转换为后台运行的任务进程。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 查看当前终端有多少在后台运行的进程。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 命令执行的结果，&lt;code&gt;＋&lt;/code&gt; 表示是一个当前的作业，&lt;code&gt;-&lt;/code&gt; 减号表示是一个当前作业之后的一个作业。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs -l&lt;/code&gt; 选项可显示所有任务的进程号 &lt;code&gt;pid&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;jobs&lt;/code&gt; 的状态可以是 &lt;code&gt;running&lt;/code&gt;，&lt;code&gt;stopped&lt;/code&gt;，&lt;code&gt;terminated&lt;/code&gt;。但是如果任务进程被终止了（&lt;code&gt;kill&lt;/code&gt;），当前的终端环境中也就删除了任务的进程标识；也就是说 &lt;strong&gt;jobs 命令显示的是当前 shell 环境中后台正在运行或者被挂起的任务进程信息&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] CentOS 升级 kernel</title>
      <link>https://vxgo.github.io/2017/01/10/%E8%BD%AC-centos-%E5%8D%87%E7%BA%A7-kernel/</link>
      <pubDate>Tue, 10 Jan 2017 11:01:09 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/01/10/%E8%BD%AC-centos-%E5%8D%87%E7%BA%A7-kernel/</guid>
      <description>&lt;h1 id=&#34;一-手动档&#34;&gt;一、手动档&lt;/h1&gt;

&lt;p&gt;手动档就是从源码开始编译内核安装，好处是可以自己选择任意版本的内核，缺点就是耗时长，编译安装消耗系统资源&lt;/p&gt;

&lt;h2 id=&#34;1-1-获取-kernel-源码&#34;&gt;1.1、获取 kernel 源码&lt;/h2&gt;

&lt;p&gt;这世界上最伟大的 Linux 内核源码下载地址是 &lt;a href=&#34;https://kernel.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;kernel&lt;/a&gt; 官网，选择一个稳定版本下载即可&lt;/p&gt;

&lt;h2 id=&#34;1-2-解压并清理&#34;&gt;1.2、解压并清理&lt;/h2&gt;

&lt;p&gt;官方要求将其解压到 &lt;code&gt;/usr/src&lt;/code&gt; 目录，其实在哪都可以，为了规范一点索性也解压到此位置，然后为了防止编译残留先做一次清理动作&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 下载内核源码
$ wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.8.6.tar.xz

# 解压并移动到 /usr/src
$ tar -Jxvf linux-4.8.6.tar.xz
$ mv linux-4.8.6 /usr/src/kernels

# 执行清理（没 gcc 的要装一下）
$ cd /usr/src/kernels/linux-4.8.6
$ make mrproper &amp;amp;&amp;amp; make clean
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 7 安装Python3、pip3</title>
      <link>https://vxgo.github.io/2017/01/07/centos-7-%E5%AE%89%E8%A3%85python3pip3/</link>
      <pubDate>Sat, 07 Jan 2017 19:23:22 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2017/01/07/centos-7-%E5%AE%89%E8%A3%85python3pip3/</guid>
      <description>&lt;p&gt;CentOS 7 默认安装了 Python 2，当需要使用 Python 3 的时候，可以手动下载 Python 源码后编译安装。&lt;/p&gt;

&lt;h1 id=&#34;一-安装-python-3&#34;&gt;一、安装 Python 3&lt;/h1&gt;

&lt;h2 id=&#34;1-1-安装准备&#34;&gt;1.1 安装准备&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo mkdir /usr/local/python3 # 创建安装目录

# 下载 Python 源文件
$ wget --no-check-certificate https://www.python.org/ftp/python/3.6.0/Python-3.6.0.tgz
# 注意：wget获取https的时候要加上：--no-check-certificate

$ tar -xzvf Python-3.6.0.tgz # 解压缩包

$ cd Python-3.6.0 # 进入解压目录
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转] shell 中单引号、双引号、反引号、反斜杠区别</title>
      <link>https://vxgo.github.io/2016/12/30/%E8%BD%AC-shell-%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 30 Dec 2016 15:36:51 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/12/30/%E8%BD%AC-shell-%E4%B8%AD%E5%8D%95%E5%BC%95%E5%8F%B7%E5%8F%8C%E5%BC%95%E5%8F%B7%E5%8F%8D%E5%BC%95%E5%8F%B7%E5%8F%8D%E6%96%9C%E6%9D%A0%E5%8C%BA%E5%88%AB/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;shell&lt;/code&gt; 可以识别 &lt;code&gt;4&lt;/code&gt; 种不同类型的引字符号：单引号字符 &lt;code&gt;&#39;&lt;/code&gt;，双引号字符 &lt;code&gt;&amp;quot;&lt;/code&gt;，反斜杠字符 &lt;code&gt;\&lt;/code&gt;，反引号字符 &lt;code&gt;`&lt;/code&gt; ，学习 &lt;code&gt;shell&lt;/code&gt; 编程的朋友可以看下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-单引号&#34;&gt;1. 单引号( &lt;code&gt;&#39;&lt;/code&gt; )&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ grep Susan phonebook
Susan Goldberg 403-212-4921
Susan Topple 212-234-2343
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果我们想查找的是 &lt;code&gt;Susan Goldberg&lt;/code&gt;，不能直接使用 &lt;code&gt;grep Susan Goldberg phonebook&lt;/code&gt; 命令，&lt;code&gt;grep&lt;/code&gt; 会把 &lt;code&gt;Goldberg&lt;/code&gt; 和 &lt;code&gt;phonebook&lt;/code&gt; 当作需要搜索的文件。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ grep &#39;Susan Gold&#39; phonebook
Susan Goldberg 403-212-4921
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当 &lt;code&gt;shell&lt;/code&gt; 碰到第一个单引号时，它忽略掉其后直到右引号的所有特殊字符。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 安装 Nginx</title>
      <link>https://vxgo.github.io/2016/12/23/centos-%E5%AE%89%E8%A3%85-nginx/</link>
      <pubDate>Fri, 23 Dec 2016 11:20:44 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/12/23/centos-%E5%AE%89%E8%A3%85-nginx/</guid>
      <description>&lt;h1 id=&#34;一-安装准备&#34;&gt;一、安装准备&lt;/h1&gt;

&lt;p&gt;首先由于 Nginx 的一些模块依赖一些 lib 库，所以在安装 Nginx 之前，必须先安装这些 lib 库，这些依赖库主要有 g++、gcc、openssl-devel、pcre-devel 和 zlib-devel，执行如下命令安装：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yum install gcc-c++
$ yum install pcre pcre-devel
$ yum install zlib zlib-devel
$ yum install openssl openssl--devel
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;二-安装-nginx&#34;&gt;二、安装 Nginx&lt;/h1&gt;

&lt;p&gt;安装之前，最好检查一下是否已经安装有 Nginx&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ find -name nginx
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>CentOS 安装 rar、zip 解压缩</title>
      <link>https://vxgo.github.io/2016/12/22/centos-%E5%AE%89%E8%A3%85-rarzip-%E8%A7%A3%E5%8E%8B%E7%BC%A9/</link>
      <pubDate>Thu, 22 Dec 2016 15:39:45 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/12/22/centos-%E5%AE%89%E8%A3%85-rarzip-%E8%A7%A3%E5%8E%8B%E7%BC%A9/</guid>
      <description>&lt;p&gt;Windows 系统压缩的 rar 和 zip 文件，在 Linux 系统下是无法通过 tar 命令解压缩的，需要使用 rar 和 zip 命令来解压缩。下面记录一下 rar 和 zip 安装和简单的使用。&lt;/p&gt;

&lt;h1 id=&#34;一-rar-安装使用&#34;&gt;一、rar 安装使用&lt;/h1&gt;

&lt;p&gt;Linux 系统下使用 rarlinux 解压缩 rar 压缩文件，下载页面：&lt;a href=&#34;http://www.rarsoft.com/download.htm。&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://www.rarsoft.com/download.htm。&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-1-下载系统对应的版本&#34;&gt;1.1 下载系统对应的版本&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ wget http://www.rarsoft.com/rar/rarlinux-x64-5.4.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-2-解压-安装&#34;&gt;1.2 解压、安装&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar -zxvf rarlinux-x64-5.4.0.tar.gz
$ cd rar
$ make
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>[转] Linux 查看系统内核版本和发行版本</title>
      <link>https://vxgo.github.io/2016/11/18/%E8%BD%AC-linux-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/</link>
      <pubDate>Fri, 18 Nov 2016 14:56:43 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/11/18/%E8%BD%AC-linux-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E5%86%85%E6%A0%B8%E7%89%88%E6%9C%AC%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/</guid>
      <description>&lt;h1 id=&#34;一-查看-linux-内核版本命令&#34;&gt;一、查看 Linux 内核版本命令&lt;/h1&gt;

&lt;p&gt;以下两条命令适合所有 &lt;code&gt;Linux&lt;/code&gt; 系统。&lt;/p&gt;

&lt;h2 id=&#34;1-cat-proc-version&#34;&gt;1、cat /proc/version&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cat /proc/version
Linux version 3.10.0-327.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.3 20140911 (Red Hat 4.8.3-9) (GCC) ) #1 SMP Thu Nov 19 22:10:57 UTC 2015

➜  ~ cat /proc/version
Linux version 4.4.0-36-generic (buildd@lcy01-01) (gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.2) ) #55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2-uname-a&#34;&gt;2、uname -a&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uname -a
Linux centos 3.10.0-327.el7.x86_64 #1 SMP Thu Nov 19 22:10:57 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux

➜  ~ uname -a
Linux www 4.4.0-36-generic #55-Ubuntu SMP Thu Aug 11 18:01:55 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Oh My Zsh 替换你的 Bash Shell</title>
      <link>https://vxgo.github.io/2016/09/24/using-oh-my-zsh/</link>
      <pubDate>Sat, 24 Sep 2016 12:31:21 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/09/24/using-oh-my-zsh/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout&amp;hellip;&lt;/p&gt;

&lt;blockquote class=&#39;blockquote-center&#39;&gt;[Oh My ZSH!][1]&lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://ws2.sinaimg.cn/large/687148dbly1focma5ect2j209d05s3yl.jpg&#34; alt=&#34;Oh My Zsh&#34; /&gt;
&lt;!-- {% img /images/post/OMZLogo_BnW.png 200 &#39;Oh My Zsh&#39;%} --&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-oh-my-zsh-简介&#34;&gt;1. Oh My Zsh 简介&lt;/h1&gt;

&lt;p&gt;无意中看见了 Linux 的一款 Shell，相比于 Bash 极其美艳，决定入坑试水一下，不试不知道，一试绝对有惊喜，不仅外观美艳而且功能强大，那还有不替换 Bash 的理由吗？搞起搞起&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 7 安装最新的 Git</title>
      <link>https://vxgo.github.io/2016/07/30/centos-7-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84-git/</link>
      <pubDate>Sat, 30 Jul 2016 22:12:43 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/07/30/centos-7-%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0%E7%9A%84-git/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;yum 源仓库里的 Git 版本更新不及时，最新版本的 Git 是 1.8.3.1，但是官方最新版本已经到了 2.9.2。想要安装最新版本的的 Git，只能下载源码进行安装。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-查看-yum-源仓库的-git-信息&#34;&gt;1. 查看 yum 源仓库的 Git 信息：&lt;/h1&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# yum info git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://vxgo.github.io/images/post/20160730222608.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，截至目前，yum 源仓库中最新的 Git 版本才 1.8.3.1，而查看最&lt;a href=&#34;https://github.com/git/git/releases&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;新的 Git 发布版本&lt;/a&gt;，已经 2.9.2 了。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>CentOS 7 安装 Node.js</title>
      <link>https://vxgo.github.io/2016/07/30/centos-7-%E5%AE%89%E8%A3%85-node.js/</link>
      <pubDate>Sat, 30 Jul 2016 16:19:03 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/07/30/centos-7-%E5%AE%89%E8%A3%85-node.js/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Node.js® is a JavaScript runtime built on Chrome&amp;rsquo;s V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js&amp;rsquo; package ecosystem, npm, is the largest ecosystem of open source libraries in the world.&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-下载源码安装文件&#34;&gt;1. 下载源码安装文件&lt;/h1&gt;

&lt;h2 id=&#34;1-1-在线安装&#34;&gt;1.1 在线安装&lt;/h2&gt;

&lt;p&gt;通过以下命令下载源文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://nodejs.org/dist/v4.4.7/node-v4.4.7.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[转]将 Centos 的 yum 源更改为国内的阿里云源</title>
      <link>https://vxgo.github.io/2016/07/30/%E8%BD%AC%E5%B0%86-centos-%E7%9A%84-yum-%E6%BA%90%E6%9B%B4%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E7%9A%84%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90/</link>
      <pubDate>Sat, 30 Jul 2016 11:57:59 +0000</pubDate>
      
      <guid>https://vxgo.github.io/2016/07/30/%E8%BD%AC%E5%B0%86-centos-%E7%9A%84-yum-%E6%BA%90%E6%9B%B4%E6%94%B9%E4%B8%BA%E5%9B%BD%E5%86%85%E7%9A%84%E9%98%BF%E9%87%8C%E4%BA%91%E6%BA%90/</guid>
      <description>&lt;p&gt;阿里云Linux安装镜像源地址：&lt;a href=&#34;http://mirrors.aliyun.com/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;http://mirrors.aliyun.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CentOS系统更换软件安装源&lt;/p&gt;

&lt;h3 id=&#34;一-备份你的原镜像文件-以免出错后可以恢复&#34;&gt;一、备份你的原镜像文件，以免出错后可以恢复。&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>